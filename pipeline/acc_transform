#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon May 16 11:17:10 2022

@author: tobou
"""

import numpy as np

def sample_probs(thr= 1.5):
    
    N=10000
    out= thr*np.random.randn(N)
    out_true= out + np.random.randn(N)
    
    Pos_true= [ i for i in out_true if abs(i)>thr]
    Neg_true= [ i for i in out_true if abs(i)<thr]
    
    Pos_noise= [ i for i in out if abs(i)>thr]
    Neg_noise= [ i for i in out if abs(i)<thr]
    
    TP=len([i for i in out[abs(out_true)>thr] if abs(i)>3.])/len(Pos_true)
    FN=len([i for i in out[abs(out_true)>thr] if abs(i)<3.])/len(Pos_true)
    FP=len([i for i in out[abs(out_true)<thr] if abs(i)>3.])/len(Neg_true)
    TN=len([i for i in out[abs(out_true)<thr] if abs(i)<3.])/len(Neg_true)
    
    labels_conf_matrix= np.array([[TP, FN], [FP,TN]])
    prior_true = np.array([  len(Pos_true)/N  , len(Neg_true)/N ])
    prior_noise =  np.array([len(Pos_noise)/N  , len(Neg_noise)/N ])
    print(np.linalg.inv(np.diag(prior_true)), np.linalg.inv(labels_conf_matrix), np.linalg.inv(np.diag(prior_noise)))

    rescaling_factor = np.linalg.inv(np.diag(prior_true)) @ np.linalg.inv(labels_conf_matrix) @ np.diag(prior_noise) # Weird. Negative values
    return rescaling_factor 

rescaling_factor= sample_probs()